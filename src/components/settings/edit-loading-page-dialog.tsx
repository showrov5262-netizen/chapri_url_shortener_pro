
'use client'

import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "../ui/textarea";
import type { LoadingPage } from "@/types";

interface EditLoadingPageDialogProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  pageData: LoadingPage | null;
  onSave: (pageData: LoadingPage) => void;
}

// A simple Monaco Editor mock for now
const CodeEditor = ({ value, onChange }: { value: string; onChange: (value: string) => void }) => {
  return (
    <Textarea 
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="min-h-[300px] font-mono bg-muted/50 text-xs"
      placeholder="Paste your HTML, CSS, and JS here..."
    />
  )
}

export function EditLoadingPageDialog({ isOpen, onOpenChange, pageData, onSave }: EditLoadingPageDialogProps) {
  const [name, setName] = useState('');
  const [content, setContent] = useState('');

  useEffect(() => {
    if (isOpen && pageData) {
      setName(pageData.name);
      setContent(pageData.content);
    } else if (isOpen && !pageData) {
      // Reset for creating a new page
      setName('');
      setContent(`<style>\n  /* Your CSS here */\n</style>\n\n<div>\n  <!-- Your HTML here -->\n</div>\n\n<script>\n  // Your JS here\n</script>`);
    }
  }, [isOpen, pageData]);

  const handleSave = () => {
    onSave({
      id: pageData?.id || '', // ID will be generated by parent for new pages
      name,
      content,
    });
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>{pageData ? 'Edit Loading Page' : 'Create New Loading Page'}</DialogTitle>
          <DialogDescription>
            Design a custom page to show users during a redirect delay.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-6 py-4">
            <div className="grid gap-2">
                <Label htmlFor="page-name">Page Name</Label>
                <Input 
                    id="page-name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="e.g., Cool Spinner Animation"
                />
            </div>
            <div className="grid gap-2">
                <Label htmlFor="page-content">Page Content</Label>
                 <CodeEditor value={content} onChange={setContent} />
                 <p className="text-xs text-muted-foreground">
                    You can include HTML, CSS inside &lt;style&gt; tags, and Javascript inside &lt;script&gt; tags.
                 </p>
            </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
          <Button onClick={handleSave}>Save Design</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
